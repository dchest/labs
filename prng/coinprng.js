/**
 * CoinRand PRNG.
 * XORs randomly generated bytes into the given Uint8Array and returns it.
 * 
 * Randomness is generated by flipping a bit for some time, similar to
 * Twuewant/Truerand.
 *
 * IMPORTANT: doesn't guarantee uniform distribution or any randomness at all
 * (can as well return all zeros or all ones) due to the need to avoid
 * infinite loops or taking too long to generate bits, so the output
 * should be whitened and mixed with some other randomness source.
 */

var milliseconds = (function() {
    if (typeof performance !== "undefined") {
        return performance.now.bind(performance);
    }
    if (typeof process !== "undefined" && process.hrtime) {
        return function() {
            var t = process.hrtime();
            return (t[0] * 1e9 + t[1]) / 1e6;
        };
    }
    return Date.now.bind(Date);
})();

function addCoinRand(out) {

    function coin() {
        var c = 0, start = milliseconds();
        while (milliseconds() - start < 0.01) c ^= 1;
        return c;
    }

    function almostfaircoin() {
        var limit = 32;
        while (limit-- > 0) {
            c = coin();
            if (c !== coin()) return c; // fair
        }
        return c; // not fair, too many throws
    }

    function genbyte() {
        var s = 0;
        for (var i = 0; i < 8; i++) {
            s = (s << 1) | almostfaircoin();
        }
        return s;
    }

    for (var i = 0; i < out.length; i++) {
        out[i] ^= genbyte();
    }
    return out;
}

module.exports = addCoinRand;
